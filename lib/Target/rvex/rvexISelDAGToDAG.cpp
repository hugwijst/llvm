//===-- rvexISelDAGToDAG.cpp - A Dag to Dag Inst Selector for rvex --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the rvex target.
//
//===----------------------------------------------------------------------===//

#define DEBUG_TYPE "rvex-isel"
#include "rvex.h"
#include "rvexMachineFunction.h"
#include "rvexRegisterInfo.h"
#include "rvexSubtarget.h"
#include "rvexTargetMachine.h"
#include "MCTargetDesc/rvexBaseInfo.h"
#include "llvm/IR/GlobalValue.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/CFG.h"
#include "llvm/IR/Type.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/SelectionDAGNodes.h"
#include "llvm/Target/TargetLibraryInfo.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===----------------------------------------------------------------------===//
// rvexDAGToDAGISel - rvex specific code to select rvex machine
// instructions for SelectionDAG operations.
//===----------------------------------------------------------------------===//
namespace {

class rvexDAGToDAGISel : public SelectionDAGISel {

  /// TM - Keep a reference to rvexTargetMachine.
  rvexTargetMachine &TM;

  /// Subtarget - Keep a pointer to the rvexSubtarget around so that we can
  /// make the right decision when generating code for different targets.
  const rvexSubtarget &Subtarget;

public:
  explicit rvexDAGToDAGISel(rvexTargetMachine &tm) :
  SelectionDAGISel(tm),
  TM(tm), Subtarget(tm.getSubtarget<rvexSubtarget>()) {}

  // Pass Name
  virtual const char *getPassName() const {
    return "rvex DAG->DAG Pattern Instruction Selection";
  }

  //virtual bool runOnMachineFunction(MachineFunction &MF);

private:
  // Include the pieces autogenerated from the target description.
  #include "rvexGenDAGISel.inc"

  /// getTargetMachine - Return a reference to the TargetMachine, casted
  /// to the target-specific type.
  const rvexTargetMachine &getTargetMachine() {
    return static_cast<const rvexTargetMachine &>(TM);
  }

  /// getInstrInfo - Return a reference to the TargetInstrInfo, casted
  /// to the target-specific type.
  const rvexInstrInfo *getInstrInfo() {
    return getTargetMachine().getInstrInfo();
  }

  SDNode *getGlobalBaseReg();

  SDNode *SelectConstant(SDNode *N);

  SDNode *Select(SDNode *N);
  // Complex Pattern.
  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);
  // getImm - Return a target constant with the specified value.
  inline SDValue getImm(const SDNode *Node, unsigned Imm) {
    return CurDAG->getTargetConstant(Imm, Node->getValueType(0));
  }
  void InitGlobalBaseReg(MachineFunction &MF);
};
}
/*
bool rvexDAGToDAGISel::runOnMachineFunction(MachineFunction &MF) {
  bool Ret = SelectionDAGISel::runOnMachineFunction(MF);

  return Ret;
}*/

/// getGlobalBaseReg - Output the instructions required to put the
/// GOT address into a register.
SDNode *rvexDAGToDAGISel::getGlobalBaseReg() {
  unsigned GlobalBaseReg = MF->getInfo<rvexFunctionInfo>()->getGlobalBaseReg();
  return CurDAG->getRegister(GlobalBaseReg, getTargetLowering()->getPointerTy()).getNode();
}

/// ComplexPattern used on rvexInstrInfo
/// Used on rvex Load/Store instructions
bool rvexDAGToDAGISel::
SelectAddr(SDNode *Parent, SDValue Addr, SDValue &Base, SDValue &Offset) {
  DEBUG(errs() << "SelectAddr!\n");
  EVT ValTy = Addr.getValueType();

  // If Parent is an unaligned f32 load or store, select a (base + index)
  // floating point load/store instruction (luxc1 or suxc1).
  const LSBaseSDNode* LS = 0;

  if (Parent && (LS = dyn_cast<LSBaseSDNode>(Parent))) {
    EVT VT = LS->getMemoryVT();

    if (VT.getSizeInBits() / 8 > LS->getAlignment()) {
      assert(getTargetLowering()->allowsMisalignedMemoryAccesses(VT) &&
             "Unaligned loads/stores not supported for this type.");
      if (VT == MVT::f32)
        return false;
    }
  }

  // if Address is FI, get the TargetFrameIndex.
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base   = CurDAG->getTargetFrameIndex(FIN->getIndex(), ValTy);
    Offset = CurDAG->getTargetConstant(0, ValTy);
    return true;
  }

  // on PIC code Load GA
  if (Addr.getOpcode() == rvexISD::Wrapper) {
    Base   = Addr.getOperand(0);
    Offset = Addr.getOperand(1);
    return true;
  }

  if (TM.getRelocationModel() != Reloc::PIC_) {
    if ((Addr.getOpcode() == ISD::TargetExternalSymbol ||
        Addr.getOpcode() == ISD::TargetGlobalAddress))
      return false;
  }


  if (Addr.getOpcode() == ISD::ADD)
  {
    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1))) {
      if (isInt<8>(CN->getSExtValue())) {
        if (FrameIndexSDNode *FIN =
                dyn_cast<FrameIndexSDNode>(Addr.getOperand(0))) {
          // Constant offset from frame ref.
          Base = CurDAG->getTargetFrameIndex(FIN->getIndex(),
                                             getTargetLowering()->getPointerTy());
        } else {
          Base = Addr.getOperand(0);
        }
        Offset = CurDAG->getTargetConstant(CN->getZExtValue(), MVT::i32);
        return true;
      }
    }
  }
  Base   = Addr;
  Offset = CurDAG->getTargetConstant(0, ValTy);
  return true;
}

SDNode *rvexDAGToDAGISel::SelectConstant(SDNode *N) {
  DEBUG(errs() << "SelectConstant!\n");
  SDLoc dl = SDLoc(N);
  if(N->getValueType(0) == MVT::i1) {
    SDNode *Result;

    int32_t Val = cast<ConstantSDNode>(N)->getSExtValue();


    SDValue Zero = CurDAG->getRegister(rvex::R0, MVT::i32);
    SDValue ZeroImm = CurDAG->getTargetConstant(Val, MVT::i32);

//      SDValue Res =  CurDAG->getSetCC(dl, MVT::i1, Zero, ZeroImm, ISD::SETEQ);

    Result = CurDAG->getMachineNode(rvex::CMPNE, dl, MVT::i1, Zero, ZeroImm);

    ReplaceUses(N, Result);
    return Result;
    


  }


  return SelectCode(N);
}

/// Select instructions not customized! Used for
/// expanded, promoted and normal instructions
SDNode* rvexDAGToDAGISel::Select(SDNode *Node) {
  unsigned Opcode = Node->getOpcode();
  SDLoc dl = SDLoc(Node);

  // Dump information about the Node being selected
  DEBUG(errs() << "Selecting: "; Node->dump(CurDAG); errs() << "\n");

  // If we have a custom node, we already have selected!
  if (Node->isMachineOpcode()) {
    DEBUG(errs() << "== "; Node->dump(CurDAG); errs() << "\n");
    return NULL;
  }

  ///
  // Instruction Selection not handled by the auto-generated
  // tablegen selection should be handled here.
  ///
  //unsigned MultOpc;


  switch(Opcode) {
  default: break;

  
  // Select correct pattern for rvexADDC instruction
  case rvexISD::Addc: {
    DEBUG(errs() << "SelectADDc!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    SDValue Cin = Node->getOperand(2);
    return CurDAG->getMachineNode(rvex::rvexADDC, dl, MVT::i32, MVT::i32,
                                  LHS, RHS, Cin);
    break;
  }

  // Select correct pattern for rvexADDE instruction
  case rvexISD::Adde: {
    DEBUG(errs() << "SelectADDe!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    SDValue Cin = Node->getOperand(2);
    return CurDAG->getMachineNode(rvex::rvexADDE, dl, MVT::i32, MVT::i1,
                                  LHS, RHS, Cin);
    break;
  }

  case rvexISD::Slct: {
    DEBUG(errs() << "SelectSLCT!\n");
    SDValue COND = Node->getOperand(0);
    SDValue LHS = Node->getOperand(1);
    SDValue RHS = Node->getOperand(2);
    return CurDAG->getMachineNode(rvex::SLCT, dl, MVT::i32, COND, LHS, RHS);
    break;    
  }

  case rvexISD::Mpyl: {
    DEBUG(errs() << "SelectMPYL!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYL, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }  

  case rvexISD::Mpyh: {
    DEBUG(errs() << "SelectMPYH!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYH, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }    

  case rvexISD::Mpyllu: {
    DEBUG(errs() << "SelectMPYLLU!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYLLU, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }
  case rvexISD::Mpylhu: {
    DEBUG(errs() << "SelectMPYLHU!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYLHU, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }
  case rvexISD::Mpyhhu: {
    DEBUG(errs() << "SelectMPYHHU!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYHHU, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }

  case rvexISD::Mpyll: {
    DEBUG(errs() << "SelectMPYLL!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYLL, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }
  case rvexISD::Mpylh: {
    DEBUG(errs() << "SelectMPYLH!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYLH, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }
  case rvexISD::Mpyhh: {
    DEBUG(errs() << "SelectMPYHH!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::rvexMPYHH, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }

  case rvexISD::Orc: {
    DEBUG(errs() << "SelectORC!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::ORC, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }

  case rvexISD::Max: {
    DEBUG(errs() << "SelectMAX!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::MAX, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }
  case rvexISD::Maxu: {
    DEBUG(errs() << "SelectMAXU!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::MAXU, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }
  case rvexISD::Min: {
    DEBUG(errs() << "SelectMIN!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::MIN, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }
  case rvexISD::Minu: {
    DEBUG(errs() << "SelectMINU!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    return CurDAG->getMachineNode(rvex::MINU, dl, MVT::i32,
                                  LHS, RHS);
    break;    
  }

  // Select correct pattern for rvexDIVS instruction
  case rvexISD::Divs: {
    DEBUG(errs() << "SelectDIVS!\n");
    SDValue LHS = Node->getOperand(0);
    SDValue RHS = Node->getOperand(1);
    SDValue Cin = Node->getOperand(2);
    return CurDAG->getMachineNode(rvex::rvexDIVS, dl, MVT::i32, MVT::i32,
                                  LHS, RHS, Cin);
    break;
  }

  

  case ISD::MULHS:
  case ISD::MULHU: {
    //MultOpc = (Opcode == ISD::MULHU ? rvex::MULTu : rvex::MULT);
    return CurDAG->getMachineNode(rvex::MULTu, dl, MVT::i32, Node->getOperand(0),
                                       Node->getOperand(1));
  }

  // Get target GOT address.
  // For global variables as follows,
  //- @gI = global i32 100, align 4
  //- %2 = load i32* @gI, align 4
  // =>
  //- .cpload	$gp
  //- ld	$2, %got(gI)($gp)
  case ISD::GLOBAL_OFFSET_TABLE:
    return getGlobalBaseReg();

  case ISD::Constant: {

    const ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Node);
    unsigned Size = CN->getValueSizeInBits(0);

    if (Size == 32)
      break;
    else
      return SelectConstant(Node);
  }
  }

  // Select the default instruction
  SDNode *ResNode = SelectCode(Node);

  DEBUG(errs() << "=> ");
  if (ResNode == NULL || ResNode == Node)
    DEBUG(Node->dump(CurDAG));
  else
    DEBUG(ResNode->dump(CurDAG));
  DEBUG(errs() << "\n");
  return ResNode;
}

/// creatervexISelDag - This pass converts a legalized DAG into a
/// rvex-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::creatervexISelDag(rvexTargetMachine &TM) {
  return new rvexDAGToDAGISel(TM);
}
